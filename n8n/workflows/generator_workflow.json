{
  "id": "9e7d8a2c-4dc1-4c3a-9a3a-9f3f8a3e8a2e",
  "name": "Generator Starter",
  "isArchived": false,
  "active": false,
  "settings": {},
  "nodes": [
    {
      "parameters": {},
      "id": "1",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -200,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Placeholder node representing the generator service.\n// It currently passes input through.\nreturn items;"
      },
      "id": "2",
      "name": "Generator",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "filePath": "/data/anomalies.jsonl",
        "binaryPropertyName": "data"
      },
      "id": "3",
      "name": "Read anomalies.jsonl",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        0,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Convert binary base64 to text, split JSONL, one item per line.\nconst b64 = items[0].binary.data.data;\nconst buf = Buffer.from(b64, 'base64');\nconst text = buf.toString('utf8');\nconst lines = text.split('\n').filter(l => l.trim().length > 0);\nreturn lines.map(l => {\n  try {\n    return { json: JSON.parse(l) };\n  } catch (e) {\n    return { json: { parse_error: true, line: l } };\n  }\n});"
      },
      "id": "4",
      "name": "Anomaly Detector (Parse JSONL)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        240,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Debug/Pass-through anomalies for downstream wiring.\nreturn items;"
      },
      "id": "5",
      "name": "Anomaly Debug",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        480,
        200
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Generator",
            "type": "main",
            "index": 0
          },
          {
            "node": "Read anomalies.jsonl",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read anomalies.jsonl": {
      "main": [
        [
          {
      "node": "Anomaly Detector (Parse JSONL)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anomaly Detector (Parse JSONL)": {
      "main": [
        [
          {
            "node": "Anomaly Debug",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
